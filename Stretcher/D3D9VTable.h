#pragma once
struct IUnknown;
#define NOMINMAX
#include <Windows.h>
#include <d3d9.h>

typedef struct IDirect3D9ExVtbl IDirect3D9ExVtbl;
typedef struct IDirect3DDevice9ExVtbl IDirect3DDevice9ExVtbl;
typedef struct IDirect3DSwapChain9ExVtbl IDirect3DSwapChain9ExVtbl;
typedef struct IDirect3D9Vtbl IDirect3D9Vtbl;
typedef struct IDirect3DDevice9Vtbl IDirect3DDevice9Vtbl;
typedef struct IDirect3DSwapChain9Vtbl IDirect3DSwapChain9Vtbl;
typedef struct IDirect3DSurface9Vtbl IDirect3DSurface9Vtbl;

typedef struct IDirect3D9Ex_ { IDirect3D9ExVtbl* lpVtbl; } IDirect3D9Ex_;
typedef struct IDirect3DDevice9Ex_ { IDirect3DDevice9ExVtbl* lpVtbl; } IDirect3DDevice9Ex_;
typedef struct IDirect3DSwapChain9Ex_ { IDirect3DSwapChain9ExVtbl* lpVtbl; } IDirect3DSwapChain9Ex_;
typedef struct IDirect3D9_ { IDirect3D9Vtbl* lpVtbl; } IDirect3D9_;
typedef struct IDirect3DDevice9_ { IDirect3DDevice9Vtbl* lpVtbl; } IDirect3DDevice9_;
typedef struct IDirect3DSwapChain9_ { IDirect3DSwapChain9Vtbl* lpVtbl; } IDirect3DSwapChain9_;
typedef struct IDirect3DSurface9_ { IDirect3DSurface9Vtbl* lpVtbl; } IDirect3DSurface9_;

struct IDirect3D9ExVtbl
{
    HRESULT(__stdcall* QueryInterface)(IDirect3D9Ex* This, const IID* const riid, void** ppvObj);
    ULONG(__stdcall* AddRef)(IDirect3D9Ex* This);
    ULONG(__stdcall* Release)(IDirect3D9Ex* This);
    HRESULT(__stdcall* RegisterSoftwareDevice)(IDirect3D9Ex* This, void* pInitializeFunction);
    UINT(__stdcall* GetAdapterCount)(IDirect3D9Ex* This);
    HRESULT(__stdcall* GetAdapterIdentifier)(IDirect3D9Ex* This, UINT Adapter, DWORD Flags, D3DADAPTER_IDENTIFIER9* pIdentifier);
    UINT(__stdcall* GetAdapterModeCount)(IDirect3D9Ex* This, UINT Adapter, D3DFORMAT Format);
    HRESULT(__stdcall* EnumAdapterModes)(IDirect3D9Ex* This, UINT Adapter, D3DFORMAT Format, UINT Mode, D3DDISPLAYMODE* pMode);
    HRESULT(__stdcall* GetAdapterDisplayMode)(IDirect3D9Ex* This, UINT Adapter, D3DDISPLAYMODE* pMode);
    HRESULT(__stdcall* CheckDeviceType)(IDirect3D9Ex* This, UINT Adapter, D3DDEVTYPE DevType, D3DFORMAT AdapterFormat, D3DFORMAT BackBufferFormat, BOOL bWindowed);
    HRESULT(__stdcall* CheckDeviceFormat)(IDirect3D9Ex* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, DWORD Usage, D3DRESOURCETYPE RType, D3DFORMAT CheckFormat);
    HRESULT(__stdcall* CheckDeviceMultiSampleType)(IDirect3D9Ex* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT SurfaceFormat, BOOL Windowed, D3DMULTISAMPLE_TYPE MultiSampleType, DWORD* pQualityLevels);
    HRESULT(__stdcall* CheckDepthStencilMatch)(IDirect3D9Ex* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, D3DFORMAT RenderTargetFormat, D3DFORMAT DepthStencilFormat);
    HRESULT(__stdcall* CheckDeviceFormatConversion)(IDirect3D9Ex* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT SourceFormat, D3DFORMAT TargetFormat);
    HRESULT(__stdcall* GetDeviceCaps)(IDirect3D9Ex* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DCAPS9* pCaps);
    HMONITOR(__stdcall* GetAdapterMonitor)(IDirect3D9Ex* This, UINT Adapter);
    HRESULT(__stdcall* CreateDevice)(IDirect3D9Ex* This, UINT Adapter, D3DDEVTYPE DeviceType, HWND hFocusWindow, DWORD BehaviorFlags, D3DPRESENT_PARAMETERS* pPresentationParameters, IDirect3DDevice9** ppReturnedDeviceInterface);
    UINT(__stdcall* GetAdapterModeCountEx)(IDirect3D9Ex* This, UINT Adapter, const D3DDISPLAYMODEFILTER* pFilter);
    HRESULT(__stdcall* EnumAdapterModesEx)(IDirect3D9Ex* This, UINT Adapter, const D3DDISPLAYMODEFILTER* pFilter, UINT Mode, D3DDISPLAYMODEEX* pMode);
    HRESULT(__stdcall* GetAdapterDisplayModeEx)(IDirect3D9Ex* This, UINT Adapter, D3DDISPLAYMODEEX* pMode, D3DDISPLAYROTATION* pRotation);
    HRESULT(__stdcall* CreateDeviceEx)(IDirect3D9Ex* This, UINT Adapter, D3DDEVTYPE DeviceType, HWND hFocusWindow, DWORD BehaviorFlags, D3DPRESENT_PARAMETERS* pPresentationParameters, D3DDISPLAYMODEEX* pFullscreenDisplayMode, IDirect3DDevice9Ex** ppReturnedDeviceInterface);
    HRESULT(__stdcall* GetAdapterLUID)(IDirect3D9Ex* This, UINT Adapter, LUID* pLUID);
};

struct IDirect3DDevice9ExVtbl
{
    HRESULT(__stdcall* QueryInterface)(IDirect3DDevice9Ex* This, const IID* const riid, void** ppvObj);
    ULONG(__stdcall* AddRef)(IDirect3DDevice9Ex* This);
    ULONG(__stdcall* Release)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* TestCooperativeLevel)(IDirect3DDevice9Ex* This);
    UINT(__stdcall* GetAvailableTextureMem)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* EvictManagedResources)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* GetDirect3D)(IDirect3DDevice9Ex* This, IDirect3D9** ppD3D9);
    HRESULT(__stdcall* GetDeviceCaps)(IDirect3DDevice9Ex* This, D3DCAPS9* pCaps);
    HRESULT(__stdcall* GetDisplayMode)(IDirect3DDevice9Ex* This, UINT iSwapChain, D3DDISPLAYMODE* pMode);
    HRESULT(__stdcall* GetCreationParameters)(IDirect3DDevice9Ex* This, D3DDEVICE_CREATION_PARAMETERS* pParameters);
    HRESULT(__stdcall* SetCursorProperties)(IDirect3DDevice9Ex* This, UINT XHotSpot, UINT YHotSpot, IDirect3DSurface9* pCursorBitmap);
    void(__stdcall* SetCursorPosition)(IDirect3DDevice9Ex* This, int X, int Y, DWORD Flags);
    BOOL(__stdcall* ShowCursor)(IDirect3DDevice9Ex* This, BOOL bShow);
    HRESULT(__stdcall* CreateAdditionalSwapChain)(IDirect3DDevice9Ex* This, D3DPRESENT_PARAMETERS* pPresentationParameters, IDirect3DSwapChain9** pSwapChain);
    HRESULT(__stdcall* GetSwapChain)(IDirect3DDevice9Ex* This, UINT iSwapChain, IDirect3DSwapChain9** pSwapChain);
    UINT(__stdcall* GetNumberOfSwapChains)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* Reset)(IDirect3DDevice9Ex* This, D3DPRESENT_PARAMETERS* pPresentationParameters);
    HRESULT(__stdcall* Present)(IDirect3DDevice9Ex* This, const RECT* pSourceRect, const RECT* pDestRect, HWND hDestWindowOverride, const RGNDATA* pDirtyRegion);
    HRESULT(__stdcall* GetBackBuffer)(IDirect3DDevice9Ex* This, UINT iSwapChain, UINT iBackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface9** ppBackBuffer);
    HRESULT(__stdcall* GetRasterStatus)(IDirect3DDevice9Ex* This, UINT iSwapChain, D3DRASTER_STATUS* pRasterStatus);
    HRESULT(__stdcall* SetDialogBoxMode)(IDirect3DDevice9Ex* This, BOOL bEnableDialogs);
    void(__stdcall* SetGammaRamp)(IDirect3DDevice9Ex* This, UINT iSwapChain, DWORD Flags, const D3DGAMMARAMP* pRamp);
    void(__stdcall* GetGammaRamp)(IDirect3DDevice9Ex* This, UINT iSwapChain, D3DGAMMARAMP* pRamp);
    HRESULT(__stdcall* CreateTexture)(IDirect3DDevice9Ex* This, UINT Width, UINT Height, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DTexture9** ppTexture, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateVolumeTexture)(IDirect3DDevice9Ex* This, UINT Width, UINT Height, UINT Depth, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DVolumeTexture9** ppVolumeTexture, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateCubeTexture)(IDirect3DDevice9Ex* This, UINT EdgeLength, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DCubeTexture9** ppCubeTexture, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateVertexBuffer)(IDirect3DDevice9Ex* This, UINT Length, DWORD Usage, DWORD FVF, D3DPOOL Pool, IDirect3DVertexBuffer9** ppVertexBuffer, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateIndexBuffer)(IDirect3DDevice9Ex* This, UINT Length, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DIndexBuffer9** ppIndexBuffer, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateRenderTarget)(IDirect3DDevice9Ex* This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Lockable, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateDepthStencilSurface)(IDirect3DDevice9Ex* This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Discard, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
    HRESULT(__stdcall* UpdateSurface)(IDirect3DDevice9Ex* This, IDirect3DSurface9* pSourceSurface, const RECT* pSourceRect, IDirect3DSurface9* pDestinationSurface, const POINT* pDestPoint);
    HRESULT(__stdcall* UpdateTexture)(IDirect3DDevice9Ex* This, IDirect3DBaseTexture9* pSourceTexture, IDirect3DBaseTexture9* pDestinationTexture);
    HRESULT(__stdcall* GetRenderTargetData)(IDirect3DDevice9Ex* This, IDirect3DSurface9* pRenderTarget, IDirect3DSurface9* pDestSurface);
    HRESULT(__stdcall* GetFrontBufferData)(IDirect3DDevice9Ex* This, UINT iSwapChain, IDirect3DSurface9* pDestSurface);
    HRESULT(__stdcall* StretchRect)(IDirect3DDevice9Ex* This, IDirect3DSurface9* pSourceSurface, const RECT* pSourceRect, IDirect3DSurface9* pDestSurface, const RECT* pDestRect, D3DTEXTUREFILTERTYPE Filter);
    HRESULT(__stdcall* ColorFill)(IDirect3DDevice9Ex* This, IDirect3DSurface9* pSurface, const RECT* pRect, D3DCOLOR color);
    HRESULT(__stdcall* CreateOffscreenPlainSurface)(IDirect3DDevice9Ex* This, UINT Width, UINT Height, D3DFORMAT Format, D3DPOOL Pool, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
    HRESULT(__stdcall* SetRenderTarget)(IDirect3DDevice9Ex* This, DWORD RenderTargetIndex, IDirect3DSurface9* pRenderTarget);
    HRESULT(__stdcall* GetRenderTarget)(IDirect3DDevice9Ex* This, DWORD RenderTargetIndex, IDirect3DSurface9** ppRenderTarget);
    HRESULT(__stdcall* SetDepthStencilSurface)(IDirect3DDevice9Ex* This, IDirect3DSurface9* pNewZStencil);
    HRESULT(__stdcall* GetDepthStencilSurface)(IDirect3DDevice9Ex* This, IDirect3DSurface9** ppZStencilSurface);
    HRESULT(__stdcall* BeginScene)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* EndScene)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* Clear)(IDirect3DDevice9Ex* This, DWORD Count, const D3DRECT* pRects, DWORD Flags, D3DCOLOR Color, float Z, DWORD Stencil);
    HRESULT(__stdcall* SetTransform)(IDirect3DDevice9Ex* This, D3DTRANSFORMSTATETYPE State, const D3DMATRIX* pMatrix);
    HRESULT(__stdcall* GetTransform)(IDirect3DDevice9Ex* This, D3DTRANSFORMSTATETYPE State, D3DMATRIX* pMatrix);
    HRESULT(__stdcall* MultiplyTransform)(IDirect3DDevice9Ex* This, D3DTRANSFORMSTATETYPE, const D3DMATRIX*);
    HRESULT(__stdcall* SetViewport)(IDirect3DDevice9Ex* This, const D3DVIEWPORT9* pViewport);
    HRESULT(__stdcall* GetViewport)(IDirect3DDevice9Ex* This, D3DVIEWPORT9* pViewport);
    HRESULT(__stdcall* SetMaterial)(IDirect3DDevice9Ex* This, const D3DMATERIAL9* pMaterial);
    HRESULT(__stdcall* GetMaterial)(IDirect3DDevice9Ex* This, D3DMATERIAL9* pMaterial);
    HRESULT(__stdcall* SetLight)(IDirect3DDevice9Ex* This, DWORD Index, const D3DLIGHT9*);
    HRESULT(__stdcall* GetLight)(IDirect3DDevice9Ex* This, DWORD Index, D3DLIGHT9*);
    HRESULT(__stdcall* LightEnable)(IDirect3DDevice9Ex* This, DWORD Index, BOOL Enable);
    HRESULT(__stdcall* GetLightEnable)(IDirect3DDevice9Ex* This, DWORD Index, BOOL* pEnable);
    HRESULT(__stdcall* SetClipPlane)(IDirect3DDevice9Ex* This, DWORD Index, const float* pPlane);
    HRESULT(__stdcall* GetClipPlane)(IDirect3DDevice9Ex* This, DWORD Index, float* pPlane);
    HRESULT(__stdcall* SetRenderState)(IDirect3DDevice9Ex* This, D3DRENDERSTATETYPE State, DWORD Value);
    HRESULT(__stdcall* GetRenderState)(IDirect3DDevice9Ex* This, D3DRENDERSTATETYPE State, DWORD* pValue);
    HRESULT(__stdcall* CreateStateBlock)(IDirect3DDevice9Ex* This, D3DSTATEBLOCKTYPE Type, IDirect3DStateBlock9** ppSB);
    HRESULT(__stdcall* BeginStateBlock)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* EndStateBlock)(IDirect3DDevice9Ex* This, IDirect3DStateBlock9** ppSB);
    HRESULT(__stdcall* SetClipStatus)(IDirect3DDevice9Ex* This, const D3DCLIPSTATUS9* pClipStatus);
    HRESULT(__stdcall* GetClipStatus)(IDirect3DDevice9Ex* This, D3DCLIPSTATUS9* pClipStatus);
    HRESULT(__stdcall* GetTexture)(IDirect3DDevice9Ex* This, DWORD Stage, IDirect3DBaseTexture9** ppTexture);
    HRESULT(__stdcall* SetTexture)(IDirect3DDevice9Ex* This, DWORD Stage, IDirect3DBaseTexture9* pTexture);
    HRESULT(__stdcall* GetTextureStageState)(IDirect3DDevice9Ex* This, DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD* pValue);
    HRESULT(__stdcall* SetTextureStageState)(IDirect3DDevice9Ex* This, DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD Value);
    HRESULT(__stdcall* GetSamplerState)(IDirect3DDevice9Ex* This, DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD* pValue);
    HRESULT(__stdcall* SetSamplerState)(IDirect3DDevice9Ex* This, DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD Value);
    HRESULT(__stdcall* ValidateDevice)(IDirect3DDevice9Ex* This, DWORD* pNumPasses);
    HRESULT(__stdcall* SetPaletteEntries)(IDirect3DDevice9Ex* This, UINT PaletteNumber, const PALETTEENTRY* pEntries);
    HRESULT(__stdcall* GetPaletteEntries)(IDirect3DDevice9Ex* This, UINT PaletteNumber, PALETTEENTRY* pEntries);
    HRESULT(__stdcall* SetCurrentTexturePalette)(IDirect3DDevice9Ex* This, UINT PaletteNumber);
    HRESULT(__stdcall* GetCurrentTexturePalette)(IDirect3DDevice9Ex* This, UINT* PaletteNumber);
    HRESULT(__stdcall* SetScissorRect)(IDirect3DDevice9Ex* This, const RECT* pRect);
    HRESULT(__stdcall* GetScissorRect)(IDirect3DDevice9Ex* This, RECT* pRect);
    HRESULT(__stdcall* SetSoftwareVertexProcessing)(IDirect3DDevice9Ex* This, BOOL bSoftware);
    BOOL(__stdcall* GetSoftwareVertexProcessing)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* SetNPatchMode)(IDirect3DDevice9Ex* This, float nSegments);
    float(__stdcall* GetNPatchMode)(IDirect3DDevice9Ex* This);
    HRESULT(__stdcall* DrawPrimitive)(IDirect3DDevice9Ex* This, D3DPRIMITIVETYPE PrimitiveType, UINT StartVertex, UINT PrimitiveCount);
    HRESULT(__stdcall* DrawIndexedPrimitive)(IDirect3DDevice9Ex* This, D3DPRIMITIVETYPE, INT BaseVertexIndex, UINT MinVertexIndex, UINT NumVertices, UINT startIndex, UINT primCount);
    HRESULT(__stdcall* DrawPrimitiveUP)(IDirect3DDevice9Ex* This, D3DPRIMITIVETYPE PrimitiveType, UINT PrimitiveCount, const void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
    HRESULT(__stdcall* DrawIndexedPrimitiveUP)(IDirect3DDevice9Ex* This, D3DPRIMITIVETYPE PrimitiveType, UINT MinVertexIndex, UINT NumVertices, UINT PrimitiveCount, const void* pIndexData, D3DFORMAT IndexDataFormat, const void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
    HRESULT(__stdcall* ProcessVertices)(IDirect3DDevice9Ex* This, UINT SrcStartIndex, UINT DestIndex, UINT VertexCount, IDirect3DVertexBuffer9* pDestBuffer, IDirect3DVertexDeclaration9* pVertexDecl, DWORD Flags);
    HRESULT(__stdcall* CreateVertexDeclaration)(IDirect3DDevice9Ex* This, const D3DVERTEXELEMENT9* pVertexElements, IDirect3DVertexDeclaration9** ppDecl);
    HRESULT(__stdcall* SetVertexDeclaration)(IDirect3DDevice9Ex* This, IDirect3DVertexDeclaration9* pDecl);
    HRESULT(__stdcall* GetVertexDeclaration)(IDirect3DDevice9Ex* This, IDirect3DVertexDeclaration9** ppDecl);
    HRESULT(__stdcall* SetFVF)(IDirect3DDevice9Ex* This, DWORD FVF);
    HRESULT(__stdcall* GetFVF)(IDirect3DDevice9Ex* This, DWORD* pFVF);
    HRESULT(__stdcall* CreateVertexShader)(IDirect3DDevice9Ex* This, const DWORD* pFunction, IDirect3DVertexShader9** ppShader);
    HRESULT(__stdcall* SetVertexShader)(IDirect3DDevice9Ex* This, IDirect3DVertexShader9* pShader);
    HRESULT(__stdcall* GetVertexShader)(IDirect3DDevice9Ex* This, IDirect3DVertexShader9** ppShader);
    HRESULT(__stdcall* SetVertexShaderConstantF)(IDirect3DDevice9Ex* This, UINT StartRegister, const float* pConstantData, UINT Vector4fCount);
    HRESULT(__stdcall* GetVertexShaderConstantF)(IDirect3DDevice9Ex* This, UINT StartRegister, float* pConstantData, UINT Vector4fCount);
    HRESULT(__stdcall* SetVertexShaderConstantI)(IDirect3DDevice9Ex* This, UINT StartRegister, const int* pConstantData, UINT Vector4iCount);
    HRESULT(__stdcall* GetVertexShaderConstantI)(IDirect3DDevice9Ex* This, UINT StartRegister, int* pConstantData, UINT Vector4iCount);
    HRESULT(__stdcall* SetVertexShaderConstantB)(IDirect3DDevice9Ex* This, UINT StartRegister, const BOOL* pConstantData, UINT  BoolCount);
    HRESULT(__stdcall* GetVertexShaderConstantB)(IDirect3DDevice9Ex* This, UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
    HRESULT(__stdcall* SetStreamSource)(IDirect3DDevice9Ex* This, UINT StreamNumber, IDirect3DVertexBuffer9* pStreamData, UINT OffsetInBytes, UINT Stride);
    HRESULT(__stdcall* GetStreamSource)(IDirect3DDevice9Ex* This, UINT StreamNumber, IDirect3DVertexBuffer9** ppStreamData, UINT* pOffsetInBytes, UINT* pStride);
    HRESULT(__stdcall* SetStreamSourceFreq)(IDirect3DDevice9Ex* This, UINT StreamNumber, UINT Setting);
    HRESULT(__stdcall* GetStreamSourceFreq)(IDirect3DDevice9Ex* This, UINT StreamNumber, UINT* pSetting);
    HRESULT(__stdcall* SetIndices)(IDirect3DDevice9Ex* This, IDirect3DIndexBuffer9* pIndexData);
    HRESULT(__stdcall* GetIndices)(IDirect3DDevice9Ex* This, IDirect3DIndexBuffer9** ppIndexData);
    HRESULT(__stdcall* CreatePixelShader)(IDirect3DDevice9Ex* This, const DWORD* pFunction, IDirect3DPixelShader9** ppShader);
    HRESULT(__stdcall* SetPixelShader)(IDirect3DDevice9Ex* This, IDirect3DPixelShader9* pShader);
    HRESULT(__stdcall* GetPixelShader)(IDirect3DDevice9Ex* This, IDirect3DPixelShader9** ppShader);
    HRESULT(__stdcall* SetPixelShaderConstantF)(IDirect3DDevice9Ex* This, UINT StartRegister, const float* pConstantData, UINT Vector4fCount);
    HRESULT(__stdcall* GetPixelShaderConstantF)(IDirect3DDevice9Ex* This, UINT StartRegister, float* pConstantData, UINT Vector4fCount);
    HRESULT(__stdcall* SetPixelShaderConstantI)(IDirect3DDevice9Ex* This, UINT StartRegister, const int* pConstantData, UINT Vector4iCount);
    HRESULT(__stdcall* GetPixelShaderConstantI)(IDirect3DDevice9Ex* This, UINT StartRegister, int* pConstantData, UINT Vector4iCount);
    HRESULT(__stdcall* SetPixelShaderConstantB)(IDirect3DDevice9Ex* This, UINT StartRegister, const BOOL* pConstantData, UINT  BoolCount);
    HRESULT(__stdcall* GetPixelShaderConstantB)(IDirect3DDevice9Ex* This, UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
    HRESULT(__stdcall* DrawRectPatch)(IDirect3DDevice9Ex* This, UINT Handle, const float* pNumSegs, const D3DRECTPATCH_INFO* pRectPatchInfo);
    HRESULT(__stdcall* DrawTriPatch)(IDirect3DDevice9Ex* This, UINT Handle, const float* pNumSegs, const D3DTRIPATCH_INFO* pTriPatchInfo);
    HRESULT(__stdcall* DeletePatch)(IDirect3DDevice9Ex* This, UINT Handle);
    HRESULT(__stdcall* CreateQuery)(IDirect3DDevice9Ex* This, D3DQUERYTYPE Type, IDirect3DQuery9** ppQuery);
    HRESULT(__stdcall* SetConvolutionMonoKernel)(IDirect3DDevice9Ex* This, UINT width, UINT height, float* rows, float* columns);
    HRESULT(__stdcall* ComposeRects)(IDirect3DDevice9Ex* This, IDirect3DSurface9* pSrc, IDirect3DSurface9* pDst, IDirect3DVertexBuffer9* pSrcRectDescs, UINT NumRects, IDirect3DVertexBuffer9* pDstRectDescs, D3DCOMPOSERECTSOP Operation, int Xoffset, int Yoffset);
    HRESULT(__stdcall* PresentEx)(IDirect3DDevice9Ex* This, const RECT* pSourceRect, const RECT* pDestRect, HWND hDestWindowOverride, const RGNDATA* pDirtyRegion, DWORD dwFlags);
    HRESULT(__stdcall* GetGPUThreadPriority)(IDirect3DDevice9Ex* This, INT* pPriority);
    HRESULT(__stdcall* SetGPUThreadPriority)(IDirect3DDevice9Ex* This, INT Priority);
    HRESULT(__stdcall* WaitForVBlank)(IDirect3DDevice9Ex* This, UINT iSwapChain);
    HRESULT(__stdcall* CheckResourceResidency)(IDirect3DDevice9Ex* This, IDirect3DResource9** pResourceArray, UINT32 NumResources);
    HRESULT(__stdcall* SetMaximumFrameLatency)(IDirect3DDevice9Ex* This, UINT MaxLatency);
    HRESULT(__stdcall* GetMaximumFrameLatency)(IDirect3DDevice9Ex* This, UINT* pMaxLatency);
    HRESULT(__stdcall* CheckDeviceState)(IDirect3DDevice9Ex* This, HWND hDestinationWindow);
    HRESULT(__stdcall* CreateRenderTargetEx)(IDirect3DDevice9Ex* This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Lockable, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
    HRESULT(__stdcall* CreateOffscreenPlainSurfaceEx)(IDirect3DDevice9Ex* This, UINT Width, UINT Height, D3DFORMAT Format, D3DPOOL Pool, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
    HRESULT(__stdcall* CreateDepthStencilSurfaceEx)(IDirect3DDevice9Ex* This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Discard, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle, DWORD Usage);
    HRESULT(__stdcall* ResetEx)(IDirect3DDevice9Ex* This, D3DPRESENT_PARAMETERS* pPresentationParameters, D3DDISPLAYMODEEX* pFullscreenDisplayMode);
    HRESULT(__stdcall* GetDisplayModeEx)(IDirect3DDevice9Ex* This, UINT iSwapChain, D3DDISPLAYMODEEX* pMode, D3DDISPLAYROTATION* pRotation);
};

struct IDirect3DSwapChain9ExVtbl
{
    HRESULT(__stdcall* QueryInterface)(IDirect3DSwapChain9Ex* This, const IID* const riid, void** ppvObj);
    ULONG(__stdcall* AddRef)(IDirect3DSwapChain9Ex* This);
    ULONG(__stdcall* Release)(IDirect3DSwapChain9Ex* This);
    HRESULT(__stdcall* Present)(IDirect3DSwapChain9Ex* This, const RECT* pSourceRect, const RECT* pDestRect, HWND hDestWindowOverride, const RGNDATA* pDirtyRegion, DWORD dwFlags);
    HRESULT(__stdcall* GetFrontBufferData)(IDirect3DSwapChain9Ex* This, IDirect3DSurface9* pDestSurface);
    HRESULT(__stdcall* GetBackBuffer)(IDirect3DSwapChain9Ex* This, UINT iBackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface9** ppBackBuffer);
    HRESULT(__stdcall* GetRasterStatus)(IDirect3DSwapChain9Ex* This, D3DRASTER_STATUS* pRasterStatus);
    HRESULT(__stdcall* GetDisplayMode)(IDirect3DSwapChain9Ex* This, D3DDISPLAYMODE* pMode);
    HRESULT(__stdcall* GetDevice)(IDirect3DSwapChain9Ex* This, IDirect3DDevice9** ppDevice);
    HRESULT(__stdcall* GetPresentParameters)(IDirect3DSwapChain9Ex* This, D3DPRESENT_PARAMETERS* pPresentationParameters);
    HRESULT(__stdcall* GetLastPresentCount)(IDirect3DSwapChain9Ex* This, UINT* pLastPresentCount);
    HRESULT(__stdcall* GetPresentStats)(IDirect3DSwapChain9Ex* This, D3DPRESENTSTATS* pPresentationStatistics);
    HRESULT(__stdcall* GetDisplayModeEx)(IDirect3DSwapChain9Ex* This, D3DDISPLAYMODEEX* pMode, D3DDISPLAYROTATION* pRotation);
};

struct IDirect3D9Vtbl
{
    HRESULT(__stdcall* QueryInterface)(IDirect3D9* This, const IID* const riid, void** ppvObj);
    ULONG(__stdcall* AddRef)(IDirect3D9* This);
    ULONG(__stdcall* Release)(IDirect3D9* This);
    HRESULT(__stdcall* RegisterSoftwareDevice)(IDirect3D9* This, void* pInitializeFunction);
    UINT(__stdcall* GetAdapterCount)(IDirect3D9* This);
    HRESULT(__stdcall* GetAdapterIdentifier)(IDirect3D9* This, UINT Adapter, DWORD Flags, D3DADAPTER_IDENTIFIER9* pIdentifier);
    UINT(__stdcall* GetAdapterModeCount)(IDirect3D9* This, UINT Adapter, D3DFORMAT Format);
    HRESULT(__stdcall* EnumAdapterModes)(IDirect3D9* This, UINT Adapter, D3DFORMAT Format, UINT Mode, D3DDISPLAYMODE* pMode);
    HRESULT(__stdcall* GetAdapterDisplayMode)(IDirect3D9* This, UINT Adapter, D3DDISPLAYMODE* pMode);
    HRESULT(__stdcall* CheckDeviceType)(IDirect3D9* This, UINT Adapter, D3DDEVTYPE DevType, D3DFORMAT AdapterFormat, D3DFORMAT BackBufferFormat, BOOL bWindowed);
    HRESULT(__stdcall* CheckDeviceFormat)(IDirect3D9* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, DWORD Usage, D3DRESOURCETYPE RType, D3DFORMAT CheckFormat);
    HRESULT(__stdcall* CheckDeviceMultiSampleType)(IDirect3D9* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT SurfaceFormat, BOOL Windowed, D3DMULTISAMPLE_TYPE MultiSampleType, DWORD* pQualityLevels);
    HRESULT(__stdcall* CheckDepthStencilMatch)(IDirect3D9* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, D3DFORMAT RenderTargetFormat, D3DFORMAT DepthStencilFormat);
    HRESULT(__stdcall* CheckDeviceFormatConversion)(IDirect3D9* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT SourceFormat, D3DFORMAT TargetFormat);
    HRESULT(__stdcall* GetDeviceCaps)(IDirect3D9* This, UINT Adapter, D3DDEVTYPE DeviceType, D3DCAPS9* pCaps);
    HMONITOR(__stdcall* GetAdapterMonitor)(IDirect3D9* This, UINT Adapter);
    HRESULT(__stdcall* CreateDevice)(IDirect3D9* This, UINT Adapter, D3DDEVTYPE DeviceType, HWND hFocusWindow, DWORD BehaviorFlags, D3DPRESENT_PARAMETERS* pPresentationParameters, IDirect3DDevice9** ppReturnedDeviceInterface);
};

struct IDirect3DDevice9Vtbl
{
    HRESULT(__stdcall* QueryInterface)(IDirect3DDevice9* This, const IID* const riid, void** ppvObj);
    ULONG(__stdcall* AddRef)(IDirect3DDevice9* This);
    ULONG(__stdcall* Release)(IDirect3DDevice9* This);
    HRESULT(__stdcall* TestCooperativeLevel)(IDirect3DDevice9* This);
    UINT(__stdcall* GetAvailableTextureMem)(IDirect3DDevice9* This);
    HRESULT(__stdcall* EvictManagedResources)(IDirect3DDevice9* This);
    HRESULT(__stdcall* GetDirect3D)(IDirect3DDevice9* This, IDirect3D9** ppD3D9);
    HRESULT(__stdcall* GetDeviceCaps)(IDirect3DDevice9* This, D3DCAPS9* pCaps);
    HRESULT(__stdcall* GetDisplayMode)(IDirect3DDevice9* This, UINT iSwapChain, D3DDISPLAYMODE* pMode);
    HRESULT(__stdcall* GetCreationParameters)(IDirect3DDevice9* This, D3DDEVICE_CREATION_PARAMETERS* pParameters);
    HRESULT(__stdcall* SetCursorProperties)(IDirect3DDevice9* This, UINT XHotSpot, UINT YHotSpot, IDirect3DSurface9* pCursorBitmap);
    void(__stdcall* SetCursorPosition)(IDirect3DDevice9* This, int X, int Y, DWORD Flags);
    BOOL(__stdcall* ShowCursor)(IDirect3DDevice9* This, BOOL bShow);
    HRESULT(__stdcall* CreateAdditionalSwapChain)(IDirect3DDevice9* This, D3DPRESENT_PARAMETERS* pPresentationParameters, IDirect3DSwapChain9** pSwapChain);
    HRESULT(__stdcall* GetSwapChain)(IDirect3DDevice9* This, UINT iSwapChain, IDirect3DSwapChain9** pSwapChain);
    UINT(__stdcall* GetNumberOfSwapChains)(IDirect3DDevice9* This);
    HRESULT(__stdcall* Reset)(IDirect3DDevice9* This, D3DPRESENT_PARAMETERS* pPresentationParameters);
    HRESULT(__stdcall* Present)(IDirect3DDevice9* This, const RECT* pSourceRect, const RECT* pDestRect, HWND hDestWindowOverride, const RGNDATA* pDirtyRegion);
    HRESULT(__stdcall* GetBackBuffer)(IDirect3DDevice9* This, UINT iSwapChain, UINT iBackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface9** ppBackBuffer);
    HRESULT(__stdcall* GetRasterStatus)(IDirect3DDevice9* This, UINT iSwapChain, D3DRASTER_STATUS* pRasterStatus);
    HRESULT(__stdcall* SetDialogBoxMode)(IDirect3DDevice9* This, BOOL bEnableDialogs);
    void(__stdcall* SetGammaRamp)(IDirect3DDevice9* This, UINT iSwapChain, DWORD Flags, const D3DGAMMARAMP* pRamp);
    void(__stdcall* GetGammaRamp)(IDirect3DDevice9* This, UINT iSwapChain, D3DGAMMARAMP* pRamp);
    HRESULT(__stdcall* CreateTexture)(IDirect3DDevice9* This, UINT Width, UINT Height, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DTexture9** ppTexture, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateVolumeTexture)(IDirect3DDevice9* This, UINT Width, UINT Height, UINT Depth, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DVolumeTexture9** ppVolumeTexture, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateCubeTexture)(IDirect3DDevice9* This, UINT EdgeLength, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DCubeTexture9** ppCubeTexture, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateVertexBuffer)(IDirect3DDevice9* This, UINT Length, DWORD Usage, DWORD FVF, D3DPOOL Pool, IDirect3DVertexBuffer9** ppVertexBuffer, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateIndexBuffer)(IDirect3DDevice9* This, UINT Length, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DIndexBuffer9** ppIndexBuffer, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateRenderTarget)(IDirect3DDevice9* This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Lockable, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
    HRESULT(__stdcall* CreateDepthStencilSurface)(IDirect3DDevice9* This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, DWORD MultisampleQuality, BOOL Discard, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
    HRESULT(__stdcall* UpdateSurface)(IDirect3DDevice9* This, IDirect3DSurface9* pSourceSurface, const RECT* pSourceRect, IDirect3DSurface9* pDestinationSurface, const POINT* pDestPoint);
    HRESULT(__stdcall* UpdateTexture)(IDirect3DDevice9* This, IDirect3DBaseTexture9* pSourceTexture, IDirect3DBaseTexture9* pDestinationTexture);
    HRESULT(__stdcall* GetRenderTargetData)(IDirect3DDevice9* This, IDirect3DSurface9* pRenderTarget, IDirect3DSurface9* pDestSurface);
    HRESULT(__stdcall* GetFrontBufferData)(IDirect3DDevice9* This, UINT iSwapChain, IDirect3DSurface9* pDestSurface);
    HRESULT(__stdcall* StretchRect)(IDirect3DDevice9* This, IDirect3DSurface9* pSourceSurface, const RECT* pSourceRect, IDirect3DSurface9* pDestSurface, const RECT* pDestRect, D3DTEXTUREFILTERTYPE Filter);
    HRESULT(__stdcall* ColorFill)(IDirect3DDevice9* This, IDirect3DSurface9* pSurface, const RECT* pRect, D3DCOLOR color);
    HRESULT(__stdcall* CreateOffscreenPlainSurface)(IDirect3DDevice9* This, UINT Width, UINT Height, D3DFORMAT Format, D3DPOOL Pool, IDirect3DSurface9** ppSurface, HANDLE* pSharedHandle);
    HRESULT(__stdcall* SetRenderTarget)(IDirect3DDevice9* This, DWORD RenderTargetIndex, IDirect3DSurface9* pRenderTarget);
    HRESULT(__stdcall* GetRenderTarget)(IDirect3DDevice9* This, DWORD RenderTargetIndex, IDirect3DSurface9** ppRenderTarget);
    HRESULT(__stdcall* SetDepthStencilSurface)(IDirect3DDevice9* This, IDirect3DSurface9* pNewZStencil);
    HRESULT(__stdcall* GetDepthStencilSurface)(IDirect3DDevice9* This, IDirect3DSurface9** ppZStencilSurface);
    HRESULT(__stdcall* BeginScene)(IDirect3DDevice9* This);
    HRESULT(__stdcall* EndScene)(IDirect3DDevice9* This);
    HRESULT(__stdcall* Clear)(IDirect3DDevice9* This, DWORD Count, const D3DRECT* pRects, DWORD Flags, D3DCOLOR Color, float Z, DWORD Stencil);
    HRESULT(__stdcall* SetTransform)(IDirect3DDevice9* This, D3DTRANSFORMSTATETYPE State, const D3DMATRIX* pMatrix);
    HRESULT(__stdcall* GetTransform)(IDirect3DDevice9* This, D3DTRANSFORMSTATETYPE State, D3DMATRIX* pMatrix);
    HRESULT(__stdcall* MultiplyTransform)(IDirect3DDevice9* This, D3DTRANSFORMSTATETYPE, const D3DMATRIX*);
    HRESULT(__stdcall* SetViewport)(IDirect3DDevice9* This, const D3DVIEWPORT9* pViewport);
    HRESULT(__stdcall* GetViewport)(IDirect3DDevice9* This, D3DVIEWPORT9* pViewport);
    HRESULT(__stdcall* SetMaterial)(IDirect3DDevice9* This, const D3DMATERIAL9* pMaterial);
    HRESULT(__stdcall* GetMaterial)(IDirect3DDevice9* This, D3DMATERIAL9* pMaterial);
    HRESULT(__stdcall* SetLight)(IDirect3DDevice9* This, DWORD Index, const D3DLIGHT9*);
    HRESULT(__stdcall* GetLight)(IDirect3DDevice9* This, DWORD Index, D3DLIGHT9*);
    HRESULT(__stdcall* LightEnable)(IDirect3DDevice9* This, DWORD Index, BOOL Enable);
    HRESULT(__stdcall* GetLightEnable)(IDirect3DDevice9* This, DWORD Index, BOOL* pEnable);
    HRESULT(__stdcall* SetClipPlane)(IDirect3DDevice9* This, DWORD Index, const float* pPlane);
    HRESULT(__stdcall* GetClipPlane)(IDirect3DDevice9* This, DWORD Index, float* pPlane);
    HRESULT(__stdcall* SetRenderState)(IDirect3DDevice9* This, D3DRENDERSTATETYPE State, DWORD Value);
    HRESULT(__stdcall* GetRenderState)(IDirect3DDevice9* This, D3DRENDERSTATETYPE State, DWORD* pValue);
    HRESULT(__stdcall* CreateStateBlock)(IDirect3DDevice9* This, D3DSTATEBLOCKTYPE Type, IDirect3DStateBlock9** ppSB);
    HRESULT(__stdcall* BeginStateBlock)(IDirect3DDevice9* This);
    HRESULT(__stdcall* EndStateBlock)(IDirect3DDevice9* This, IDirect3DStateBlock9** ppSB);
    HRESULT(__stdcall* SetClipStatus)(IDirect3DDevice9* This, const D3DCLIPSTATUS9* pClipStatus);
    HRESULT(__stdcall* GetClipStatus)(IDirect3DDevice9* This, D3DCLIPSTATUS9* pClipStatus);
    HRESULT(__stdcall* GetTexture)(IDirect3DDevice9* This, DWORD Stage, IDirect3DBaseTexture9** ppTexture);
    HRESULT(__stdcall* SetTexture)(IDirect3DDevice9* This, DWORD Stage, IDirect3DBaseTexture9* pTexture);
    HRESULT(__stdcall* GetTextureStageState)(IDirect3DDevice9* This, DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD* pValue);
    HRESULT(__stdcall* SetTextureStageState)(IDirect3DDevice9* This, DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD Value);
    HRESULT(__stdcall* GetSamplerState)(IDirect3DDevice9* This, DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD* pValue);
    HRESULT(__stdcall* SetSamplerState)(IDirect3DDevice9* This, DWORD Sampler, D3DSAMPLERSTATETYPE Type, DWORD Value);
    HRESULT(__stdcall* ValidateDevice)(IDirect3DDevice9* This, DWORD* pNumPasses);
    HRESULT(__stdcall* SetPaletteEntries)(IDirect3DDevice9* This, UINT PaletteNumber, const PALETTEENTRY* pEntries);
    HRESULT(__stdcall* GetPaletteEntries)(IDirect3DDevice9* This, UINT PaletteNumber, PALETTEENTRY* pEntries);
    HRESULT(__stdcall* SetCurrentTexturePalette)(IDirect3DDevice9* This, UINT PaletteNumber);
    HRESULT(__stdcall* GetCurrentTexturePalette)(IDirect3DDevice9* This, UINT* PaletteNumber);
    HRESULT(__stdcall* SetScissorRect)(IDirect3DDevice9* This, const RECT* pRect);
    HRESULT(__stdcall* GetScissorRect)(IDirect3DDevice9* This, RECT* pRect);
    HRESULT(__stdcall* SetSoftwareVertexProcessing)(IDirect3DDevice9* This, BOOL bSoftware);
    BOOL(__stdcall* GetSoftwareVertexProcessing)(IDirect3DDevice9* This);
    HRESULT(__stdcall* SetNPatchMode)(IDirect3DDevice9* This, float nSegments);
    float(__stdcall* GetNPatchMode)(IDirect3DDevice9* This);
    HRESULT(__stdcall* DrawPrimitive)(IDirect3DDevice9* This, D3DPRIMITIVETYPE PrimitiveType, UINT StartVertex, UINT PrimitiveCount);
    HRESULT(__stdcall* DrawIndexedPrimitive)(IDirect3DDevice9* This, D3DPRIMITIVETYPE, INT BaseVertexIndex, UINT MinVertexIndex, UINT NumVertices, UINT startIndex, UINT primCount);
    HRESULT(__stdcall* DrawPrimitiveUP)(IDirect3DDevice9* This, D3DPRIMITIVETYPE PrimitiveType, UINT PrimitiveCount, const void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
    HRESULT(__stdcall* DrawIndexedPrimitiveUP)(IDirect3DDevice9* This, D3DPRIMITIVETYPE PrimitiveType, UINT MinVertexIndex, UINT NumVertices, UINT PrimitiveCount, const void* pIndexData, D3DFORMAT IndexDataFormat, const void* pVertexStreamZeroData, UINT VertexStreamZeroStride);
    HRESULT(__stdcall* ProcessVertices)(IDirect3DDevice9* This, UINT SrcStartIndex, UINT DestIndex, UINT VertexCount, IDirect3DVertexBuffer9* pDestBuffer, IDirect3DVertexDeclaration9* pVertexDecl, DWORD Flags);
    HRESULT(__stdcall* CreateVertexDeclaration)(IDirect3DDevice9* This, const D3DVERTEXELEMENT9* pVertexElements, IDirect3DVertexDeclaration9** ppDecl);
    HRESULT(__stdcall* SetVertexDeclaration)(IDirect3DDevice9* This, IDirect3DVertexDeclaration9* pDecl);
    HRESULT(__stdcall* GetVertexDeclaration)(IDirect3DDevice9* This, IDirect3DVertexDeclaration9** ppDecl);
    HRESULT(__stdcall* SetFVF)(IDirect3DDevice9* This, DWORD FVF);
    HRESULT(__stdcall* GetFVF)(IDirect3DDevice9* This, DWORD* pFVF);
    HRESULT(__stdcall* CreateVertexShader)(IDirect3DDevice9* This, const DWORD* pFunction, IDirect3DVertexShader9** ppShader);
    HRESULT(__stdcall* SetVertexShader)(IDirect3DDevice9* This, IDirect3DVertexShader9* pShader);
    HRESULT(__stdcall* GetVertexShader)(IDirect3DDevice9* This, IDirect3DVertexShader9** ppShader);
    HRESULT(__stdcall* SetVertexShaderConstantF)(IDirect3DDevice9* This, UINT StartRegister, const float* pConstantData, UINT Vector4fCount);
    HRESULT(__stdcall* GetVertexShaderConstantF)(IDirect3DDevice9* This, UINT StartRegister, float* pConstantData, UINT Vector4fCount);
    HRESULT(__stdcall* SetVertexShaderConstantI)(IDirect3DDevice9* This, UINT StartRegister, const int* pConstantData, UINT Vector4iCount);
    HRESULT(__stdcall* GetVertexShaderConstantI)(IDirect3DDevice9* This, UINT StartRegister, int* pConstantData, UINT Vector4iCount);
    HRESULT(__stdcall* SetVertexShaderConstantB)(IDirect3DDevice9* This, UINT StartRegister, const BOOL* pConstantData, UINT  BoolCount);
    HRESULT(__stdcall* GetVertexShaderConstantB)(IDirect3DDevice9* This, UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
    HRESULT(__stdcall* SetStreamSource)(IDirect3DDevice9* This, UINT StreamNumber, IDirect3DVertexBuffer9* pStreamData, UINT OffsetInBytes, UINT Stride);
    HRESULT(__stdcall* GetStreamSource)(IDirect3DDevice9* This, UINT StreamNumber, IDirect3DVertexBuffer9** ppStreamData, UINT* pOffsetInBytes, UINT* pStride);
    HRESULT(__stdcall* SetStreamSourceFreq)(IDirect3DDevice9* This, UINT StreamNumber, UINT Setting);
    HRESULT(__stdcall* GetStreamSourceFreq)(IDirect3DDevice9* This, UINT StreamNumber, UINT* pSetting);
    HRESULT(__stdcall* SetIndices)(IDirect3DDevice9* This, IDirect3DIndexBuffer9* pIndexData);
    HRESULT(__stdcall* GetIndices)(IDirect3DDevice9* This, IDirect3DIndexBuffer9** ppIndexData);
    HRESULT(__stdcall* CreatePixelShader)(IDirect3DDevice9* This, const DWORD* pFunction, IDirect3DPixelShader9** ppShader);
    HRESULT(__stdcall* SetPixelShader)(IDirect3DDevice9* This, IDirect3DPixelShader9* pShader);
    HRESULT(__stdcall* GetPixelShader)(IDirect3DDevice9* This, IDirect3DPixelShader9** ppShader);
    HRESULT(__stdcall* SetPixelShaderConstantF)(IDirect3DDevice9* This, UINT StartRegister, const float* pConstantData, UINT Vector4fCount);
    HRESULT(__stdcall* GetPixelShaderConstantF)(IDirect3DDevice9* This, UINT StartRegister, float* pConstantData, UINT Vector4fCount);
    HRESULT(__stdcall* SetPixelShaderConstantI)(IDirect3DDevice9* This, UINT StartRegister, const int* pConstantData, UINT Vector4iCount);
    HRESULT(__stdcall* GetPixelShaderConstantI)(IDirect3DDevice9* This, UINT StartRegister, int* pConstantData, UINT Vector4iCount);
    HRESULT(__stdcall* SetPixelShaderConstantB)(IDirect3DDevice9* This, UINT StartRegister, const BOOL* pConstantData, UINT  BoolCount);
    HRESULT(__stdcall* GetPixelShaderConstantB)(IDirect3DDevice9* This, UINT StartRegister, BOOL* pConstantData, UINT BoolCount);
    HRESULT(__stdcall* DrawRectPatch)(IDirect3DDevice9* This, UINT Handle, const float* pNumSegs, const D3DRECTPATCH_INFO* pRectPatchInfo);
    HRESULT(__stdcall* DrawTriPatch)(IDirect3DDevice9* This, UINT Handle, const float* pNumSegs, const D3DTRIPATCH_INFO* pTriPatchInfo);
    HRESULT(__stdcall* DeletePatch)(IDirect3DDevice9* This, UINT Handle);
    HRESULT(__stdcall* CreateQuery)(IDirect3DDevice9* This, D3DQUERYTYPE Type, IDirect3DQuery9** ppQuery);
};

struct IDirect3DSwapChain9Vtbl
{
    HRESULT(__stdcall* QueryInterface)(IDirect3DSwapChain9* This, const IID* const riid, void** ppvObj);
    ULONG(__stdcall* AddRef)(IDirect3DSwapChain9* This);
    ULONG(__stdcall* Release)(IDirect3DSwapChain9* This);
    HRESULT(__stdcall* Present)(IDirect3DSwapChain9* This, const RECT* pSourceRect, const RECT* pDestRect, HWND hDestWindowOverride, const RGNDATA* pDirtyRegion, DWORD dwFlags);
    HRESULT(__stdcall* GetFrontBufferData)(IDirect3DSwapChain9* This, IDirect3DSurface9* pDestSurface);
    HRESULT(__stdcall* GetBackBuffer)(IDirect3DSwapChain9* This, UINT iBackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface9** ppBackBuffer);
    HRESULT(__stdcall* GetRasterStatus)(IDirect3DSwapChain9* This, D3DRASTER_STATUS* pRasterStatus);
    HRESULT(__stdcall* GetDisplayMode)(IDirect3DSwapChain9* This, D3DDISPLAYMODE* pMode);
    HRESULT(__stdcall* GetDevice)(IDirect3DSwapChain9* This, IDirect3DDevice9** ppDevice);
    HRESULT(__stdcall* GetPresentParameters)(IDirect3DSwapChain9* This, D3DPRESENT_PARAMETERS* pPresentationParameters);
};

struct IDirect3DSurface9Vtbl
{
    HRESULT(__stdcall* QueryInterface)(IDirect3DSurface9* This, const IID* const riid, void** ppvObj);
    ULONG(__stdcall* AddRef)(IDirect3DSurface9* This);
    ULONG(__stdcall* Release)(IDirect3DSurface9* This);
    HRESULT(__stdcall* GetDevice)(IDirect3DSurface9* This, IDirect3DDevice9** ppDevice);
    HRESULT(__stdcall* SetPrivateData)(IDirect3DSurface9* This, const IID* const refguid, const void* pData, DWORD SizeOfData, DWORD Flags);
    HRESULT(__stdcall* GetPrivateData)(IDirect3DSurface9* This, const IID* const refguid, void* pData, DWORD* pSizeOfData);
    HRESULT(__stdcall* FreePrivateData)(IDirect3DSurface9* This, const IID* const refguid);
    DWORD (__stdcall* SetPriority)(IDirect3DSurface9* This, DWORD PriorityNew);
    DWORD (__stdcall* GetPriority)(IDirect3DSurface9* This);
    void (__stdcall* PreLoad)(IDirect3DSurface9* This);
    D3DRESOURCETYPE (__stdcall* GetType)(IDirect3DSurface9* This);
    HRESULT(__stdcall* GetContainer)(IDirect3DSurface9* This, const IID* const riid, void** ppContainer);
    HRESULT(__stdcall* GetDesc)(IDirect3DSurface9* This, D3DSURFACE_DESC* pDesc);
    HRESULT(__stdcall* LockRect)(IDirect3DSurface9* This, D3DLOCKED_RECT* pLockedRect, const RECT* pRect, DWORD Flags);
    HRESULT(__stdcall* UnlockRect)(IDirect3DSurface9* This);
    HRESULT(__stdcall* GetDC)(IDirect3DSurface9* This, HDC* phdc);
    HRESULT(__stdcall* ReleaseDC)(IDirect3DSurface9* This, HDC hdc);
};
