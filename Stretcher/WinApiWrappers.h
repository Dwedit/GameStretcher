#pragma once

struct IUnknown;
#define NOMINMAX
#include <Windows.h>
#include <d3d9.h>
#include <ddraw.h>

//Function Pointer Typedefs
typedef BOOL(WINAPI* ClientToScreen_FUNC)(HWND hWnd, LPPOINT lpPoint);
typedef BOOL(WINAPI* ScreenToClient_FUNC)(HWND hWnd, LPPOINT lpPoint);
typedef int(WINAPI* MapWindowPoints_FUNC)(HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
typedef HWND(WINAPI* CreateWindowExA_FUNC)(DWORD, LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID);
typedef HWND(WINAPI* CreateWindowExW_FUNC)(DWORD, LPCWSTR, LPCWSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID);
typedef BOOL(WINAPI* ShowWindow_FUNC)(HWND hWnd, int nCmdShow);
typedef BOOL(WINAPI* GetClientRect_FUNC)(HWND, LPRECT);
typedef BOOL(WINAPI* GetWindowPlacement_FUNC)(HWND, WINDOWPLACEMENT*);
typedef BOOL(WINAPI* GetWindowRect_FUNC)(HWND, LPRECT);
typedef BOOL(WINAPI* MoveWindow_FUNC)(HWND, int, int, int, int, BOOL);
typedef ATOM(WINAPI* RegisterClassA_FUNC)(CONST WNDCLASSA* lpWndClass);
typedef ATOM(WINAPI* RegisterClassW_FUNC)(CONST WNDCLASSW* lpWndClass);
typedef ATOM(WINAPI* RegisterClassExA_FUNC)(CONST WNDCLASSEXA* _arg1);
typedef ATOM(WINAPI* RegisterClassExW_FUNC)(CONST WNDCLASSEXW* _arg1);
typedef BOOL(WINAPI* UnregisterClassA_FUNC)(LPCSTR lpClassName, HINSTANCE hInstance);
typedef BOOL(WINAPI* UnregisterClassW_FUNC)(LPCWSTR lpClassName, HINSTANCE hInstance); 
typedef DWORD(WINAPI* GetClassLongA_FUNC)(HWND hWnd, int nIndex);
typedef DWORD(WINAPI* GetClassLongW_FUNC)(HWND hWnd, int nIndex);
typedef DWORD(WINAPI* SetClassLongA_FUNC)(HWND hWnd, int nIndex, LONG dwNewLong);
typedef DWORD(WINAPI* SetClassLongW_FUNC)(HWND hWnd, int nIndex, LONG dwNewLong);
typedef ULONG_PTR(WINAPI* GetClassLongPtrA_FUNC)(HWND hWnd, int nIndex);
typedef ULONG_PTR(WINAPI* GetClassLongPtrW_FUNC)(HWND hWnd, int nIndex);
typedef ULONG_PTR(WINAPI* SetClassLongPtrA_FUNC)(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
typedef ULONG_PTR(WINAPI* SetClassLongPtrW_FUNC)(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
typedef LONG(WINAPI* GetWindowLongA_FUNC)(HWND hWnd, int nIndex);
typedef LONG(WINAPI* GetWindowLongW_FUNC)(HWND hWnd, int nIndex);
typedef LONG_PTR(WINAPI* GetWindowLongPtrA_FUNC)(HWND hWnd, int nIndex);
typedef LONG_PTR(WINAPI* GetWindowLongPtrW_FUNC)(HWND hWnd, int nIndex);
typedef LONG(WINAPI* SetWindowLongA_FUNC)(HWND, int, LONG);
typedef LONG(WINAPI* SetWindowLongW_FUNC)(HWND, int, LONG);
typedef LONG_PTR(WINAPI* SetWindowLongPtrA_FUNC)(HWND, int, LONG_PTR);
typedef LONG_PTR(WINAPI* SetWindowLongPtrW_FUNC)(HWND, int, LONG_PTR);
typedef BOOL(WINAPI* SetWindowPlacement_FUNC)(HWND hWnd, const WINDOWPLACEMENT*);
typedef BOOL(WINAPI* SetWindowPos_FUNC)(HWND, HWND, int, int, int, int, UINT);
typedef BOOL(WINAPI* GetCursorPos_FUNC)(LPPOINT);
typedef BOOL(WINAPI* SetCursorPos_FUNC)(int, int);
typedef HDC(WINAPI* BeginPaint_FUNC)(HWND, LPPAINTSTRUCT);
typedef BOOL(WINAPI* EndPaint_FUNC)(HWND, const PAINTSTRUCT*);
typedef HDC(WINAPI* GetDC_FUNC)(HWND);
typedef BOOL(WINAPI* InvalidateRect_FUNC)(HWND, LPCRECT, BOOL);
typedef int(WINAPI* ReleaseDC_FUNC)(HWND, HDC);
typedef BOOL(WINAPI* ValidateRect_FUNC)(HWND, LPCRECT);
typedef BOOL(WINAPI* GdiFlush_FUNC)();
typedef HHOOK(WINAPI* SetWindowsHookA_FUNC)(int nFilterType, HOOKPROC pfnFilterProc);
typedef HHOOK(WINAPI* SetWindowsHookW_FUNC)(int nFilterType, HOOKPROC pfnFilterProc);
typedef BOOL(WINAPI* UnhookWindowsHook_FUNC)(int nCode, HOOKPROC pfnFilterProc);
typedef HHOOK(WINAPI* SetWindowsHookExA_FUNC)(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
typedef HHOOK(WINAPI* SetWindowsHookExW_FUNC)(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
typedef BOOL(WINAPI* UnhookWindowsHookEx_FUNC)(HHOOK hhk);
typedef LRESULT(WINAPI* CallNextHookEx_FUNC)(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
typedef HWINEVENTHOOK(WINAPI* SetWinEventHook_FUNC)(DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags);
typedef BOOL(WINAPI* IsWinEventHookInstalled_FUNC)(DWORD event);
typedef BOOL(WINAPI* UnhookWinEvent_FUNC)(HWINEVENTHOOK hWinEventHook);
typedef BOOL(WINAPI* TrackPopupMenu_FUNC)(HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, CONST RECT* prcRect);
typedef BOOL(WINAPI* TrackPopupMenuEx_FUNC)(HMENU hMenu, UINT uFlags, int x, int y, HWND hwnd, LPTPMPARAMS lptpm);
typedef HDC(WINAPI* GetDCEx_FUNC)(HWND hWnd, HRGN hrgnClip, DWORD flags);
typedef BOOL(WINAPI* GetUpdateRect_FUNC)(HWND hWnd, LPRECT lpRect, BOOL bErase);
typedef int(WINAPI* GetUpdateRgn_FUNC)(HWND hWnd, HRGN hRgn, BOOL bErase);
typedef BOOL(WINAPI* InvalidateRgn_FUNC)(HWND hWnd, HRGN hRgn, BOOL bErase);
typedef BOOL(WINAPI* RedrawWindow_FUNC)(HWND hWnd, CONST RECT* lprcUpdate, HRGN hrgnUpdate, UINT flags);
typedef int(WINAPI* GetSystemMetrics_FUNC)(int nIndex);
typedef BOOL(WINAPI* GetMonitorInfoA_FUNC)(HMONITOR hMonitor, LPMONITORINFO lpmi);
typedef BOOL(WINAPI* GetMonitorInfoW_FUNC)(HMONITOR hMonitor, LPMONITORINFO lpmi);
typedef BOOL(WINAPI* IsZoomed_FUNC)(HWND hWnd);
typedef FARPROC(WINAPI* GetProcAddress_FUNC)(HMODULE hModule, LPCSTR lpProcName);
typedef HMODULE(WINAPI* LoadLibraryA_FUNC)(LPCSTR fileName);
typedef HMODULE(WINAPI* LoadLibraryW_FUNC)(LPCWSTR fileName);
typedef IDirect3D9* (WINAPI* Direct3DCreate9_FUNC)(UINT SDKVersion);
typedef HRESULT (WINAPI* Direct3DCreate9Ex_FUNC)(UINT SDKVersion, IDirect3D9Ex** lpIDirect3D9Ex);
typedef HRESULT(WINAPI* DirectDrawCreate_FUNC)(GUID* lpGUID, LPDIRECTDRAW* lplpDD, IUnknown* pUnkOuter);
typedef HRESULT(WINAPI* DirectDrawCreateEx_FUNC)(GUID* lpGuid, LPVOID* lplpDD, REFIID iid, IUnknown* pUnkOuter);

//Import Backups (Declarations)
extern ClientToScreen_FUNC ClientToScreen_OLD;
extern ScreenToClient_FUNC ScreenToClient_OLD;
extern MapWindowPoints_FUNC MapWindowPoints_OLD;
extern CreateWindowExA_FUNC CreateWindowExA_OLD;
extern CreateWindowExW_FUNC CreateWindowExW_OLD;
extern ShowWindow_FUNC ShowWindow_OLD;
extern GetClientRect_FUNC GetClientRect_OLD;
extern GetWindowPlacement_FUNC GetWindowPlacement_OLD;
extern GetWindowRect_FUNC GetWindowRect_OLD;
extern MoveWindow_FUNC MoveWindow_OLD;
extern RegisterClassA_FUNC RegisterClassA_OLD;
extern RegisterClassW_FUNC RegisterClassW_OLD;
extern RegisterClassExA_FUNC RegisterClassExA_OLD;
extern RegisterClassExW_FUNC RegisterClassExW_OLD;
extern UnregisterClassA_FUNC UnregisterClassA_OLD;
extern UnregisterClassW_FUNC UnregisterClassW_OLD;
extern GetClassLongA_FUNC GetClassLongA_OLD;
extern GetClassLongW_FUNC GetClassLongW_OLD;
extern SetClassLongA_FUNC SetClassLongA_OLD;
extern SetClassLongW_FUNC SetClassLongW_OLD;
extern GetClassLongPtrA_FUNC GetClassLongPtrA_OLD;
extern GetClassLongPtrW_FUNC GetClassLongPtrW_OLD;
extern SetClassLongPtrA_FUNC SetClassLongPtrA_OLD;
extern SetClassLongPtrW_FUNC SetClassLongPtrW_OLD;
extern GetWindowLongA_FUNC GetWindowLongA_OLD;
extern GetWindowLongW_FUNC GetWindowLongW_OLD;
extern GetWindowLongPtrA_FUNC GetWindowLongPtrA_OLD;
extern GetWindowLongPtrW_FUNC GetWindowLongPtrW_OLD;
extern SetWindowLongA_FUNC SetWindowLongA_OLD;
extern SetWindowLongW_FUNC SetWindowLongW_OLD;
extern SetWindowLongPtrA_FUNC SetWindowLongPtrA_OLD;
extern SetWindowLongPtrW_FUNC SetWindowLongPtrW_OLD;
extern SetWindowPlacement_FUNC SetWindowPlacement_OLD;
extern SetWindowPos_FUNC SetWindowPos_OLD;
extern GetCursorPos_FUNC GetCursorPos_OLD;
extern SetCursorPos_FUNC SetCursorPos_OLD;
extern BeginPaint_FUNC BeginPaint_OLD;
extern EndPaint_FUNC EndPaint_OLD;
extern GetDC_FUNC GetDC_OLD;
extern InvalidateRect_FUNC InvalidateRect_OLD;
extern ReleaseDC_FUNC ReleaseDC_OLD;
extern ValidateRect_FUNC ValidateRect_OLD;
extern GdiFlush_FUNC GdiFlush_OLD;
extern SetWindowsHookA_FUNC SetWindowsHookA_OLD;
extern SetWindowsHookW_FUNC SetWindowsHookW_OLD;
extern UnhookWindowsHook_FUNC UnhookWindowsHook_OLD;
extern SetWindowsHookExA_FUNC SetWindowsHookExA_OLD;
extern SetWindowsHookExW_FUNC SetWindowsHookExW_OLD;
extern UnhookWindowsHookEx_FUNC UnhookWindowsHookEx_OLD;
extern CallNextHookEx_FUNC CallNextHookEx_OLD;
extern SetWinEventHook_FUNC SetWinEventHook_OLD;
extern IsWinEventHookInstalled_FUNC IsWinEventHookInstalled_OLD;
extern UnhookWinEvent_FUNC UnhookWinEvent_OLD;
extern TrackPopupMenu_FUNC TrackPopupMenu_OLD;
extern TrackPopupMenuEx_FUNC TrackPopupMenuEx_OLD;
extern GetDCEx_FUNC GetDCEx_OLD;
extern GetUpdateRect_FUNC GetUpdateRect_OLD;
extern GetUpdateRgn_FUNC GetUpdateRgn_OLD;
extern InvalidateRgn_FUNC InvalidateRgn_OLD;
extern RedrawWindow_FUNC RedrawWindow_OLD;
extern GetSystemMetrics_FUNC GetSystemMetrics_OLD;
extern GetMonitorInfoA_FUNC GetMonitorInfoA_OLD;
extern GetMonitorInfoW_FUNC GetMonitorInfoW_OLD;
extern IsZoomed_FUNC IsZoomed_OLD; 
extern GetProcAddress_FUNC GetProcAddress_OLD;
extern LoadLibraryA_FUNC LoadLibraryA_OLD;
extern LoadLibraryW_FUNC LoadLibraryW_OLD;
extern Direct3DCreate9_FUNC Direct3DCreate9_OLD;
extern Direct3DCreate9Ex_FUNC Direct3DCreate9Ex_OLD;
extern DirectDrawCreate_FUNC DirectDrawCreate_OLD;
extern DirectDrawCreateEx_FUNC DirectDrawCreateEx_OLD;

//Replacement Functions (Declarations)
BOOL WINAPI ClientToScreen_Replacement(HWND hWnd, LPPOINT lpPoint);
BOOL WINAPI ScreenToClient_Replacement(HWND hWnd, LPPOINT lpPoint);
int WINAPI MapWindowPoints_Replacement(HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
HWND WINAPI CreateWindowExA_Replacement(DWORD, LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID);
HWND WINAPI CreateWindowExW_Replacement(DWORD, LPCWSTR, LPCWSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID);
BOOL WINAPI ShowWindow_Replacement(HWND hWnd, int nCmdShow);
BOOL WINAPI GetClientRect_Replacement(HWND, LPRECT);
BOOL WINAPI GetWindowPlacement_Replacement(HWND, WINDOWPLACEMENT*);
BOOL WINAPI GetWindowRect_Replacement(HWND, LPRECT);
BOOL WINAPI MoveWindow_Replacement(HWND, int, int, int, int, BOOL);
ATOM WINAPI RegisterClassA_Replacement(CONST WNDCLASSA* lpWndClass);
ATOM WINAPI RegisterClassW_Replacement(CONST WNDCLASSW* lpWndClass); 
ATOM WINAPI RegisterClassExA_Replacement(CONST WNDCLASSEXA* _arg1);
ATOM WINAPI RegisterClassExW_Replacement(CONST WNDCLASSEXW* _arg1);
BOOL WINAPI UnregisterClassA_Replacement(LPCSTR lpClassName, HINSTANCE hInstance);
BOOL WINAPI UnregisterClassW_Replacement(LPCWSTR lpClassName, HINSTANCE hInstance);
DWORD WINAPI GetClassLongA_Replacement(HWND hWnd, int nIndex);
DWORD WINAPI GetClassLongW_Replacement(HWND hWnd, int nIndex);
DWORD WINAPI SetClassLongA_Replacement(HWND hWnd, int nIndex, LONG dwNewLong);
DWORD WINAPI SetClassLongW_Replacement(HWND hWnd, int nIndex, LONG dwNewLong);
ULONG_PTR WINAPI GetClassLongPtrA_Replacement(HWND hWnd, int nIndex);
ULONG_PTR WINAPI GetClassLongPtrW_Replacement(HWND hWnd, int nIndex);
ULONG_PTR WINAPI SetClassLongPtrA_Replacement(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
ULONG_PTR WINAPI SetClassLongPtrW_Replacement(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
LONG WINAPI GetWindowLongA_Replacement(HWND hWnd, int nIndex);
LONG WINAPI GetWindowLongW_Replacement(HWND hWnd, int nIndex);
LONG_PTR WINAPI GetWindowLongPtrA_Replacement(HWND hWnd, int nIndex);
LONG_PTR WINAPI GetWindowLongPtrW_Replacement(HWND hWnd, int nIndex);
LONG WINAPI SetWindowLongA_Replacement(HWND, int, LONG);
LONG WINAPI SetWindowLongW_Replacement(HWND, int, LONG);
LONG_PTR WINAPI SetWindowLongPtrA_Replacement(HWND, int, LONG_PTR);
LONG_PTR WINAPI SetWindowLongPtrW_Replacement(HWND, int, LONG_PTR);
BOOL WINAPI SetWindowPlacement_Replacement(HWND hWnd, const WINDOWPLACEMENT*);
BOOL WINAPI SetWindowPos_Replacement(HWND, HWND, int, int, int, int, UINT);
BOOL WINAPI GetCursorPos_Replacement(LPPOINT);
BOOL WINAPI SetCursorPos_Replacement(int, int);
HDC WINAPI BeginPaint_Replacement(HWND, LPPAINTSTRUCT);
BOOL WINAPI EndPaint_Replacement(HWND, const PAINTSTRUCT*);
HDC WINAPI GetDC_Replacement(HWND);
BOOL WINAPI InvalidateRect_Replacement(HWND, LPCRECT, BOOL);
int WINAPI ReleaseDC_Replacement(HWND, HDC);
BOOL WINAPI ValidateRect_Replacement(HWND, LPCRECT);
BOOL WINAPI GdiFlush_Replacement();
HHOOK WINAPI SetWindowsHookA_Replacement(int nFilterType, HOOKPROC pfnFilterProc);
HHOOK WINAPI SetWindowsHookW_Replacement(int nFilterType, HOOKPROC pfnFilterProc);
BOOL WINAPI UnhookWindowsHook_Replacement(int nCode, HOOKPROC pfnFilterProc);
HHOOK WINAPI SetWindowsHookExA_Replacement(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
HHOOK WINAPI SetWindowsHookExW_Replacement(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
BOOL WINAPI UnhookWindowsHookEx_Replacement(HHOOK hhk);
LRESULT WINAPI CallNextHookEx_Replacement(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
HWINEVENTHOOK WINAPI SetWinEventHook_Replacement(DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags);
BOOL WINAPI IsWinEventHookInstalled_Replacement(DWORD event);
BOOL WINAPI UnhookWinEvent_Replacement(HWINEVENTHOOK hWinEventHook);
BOOL WINAPI TrackPopupMenu_Replacement(HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, CONST RECT* prcRect);
BOOL WINAPI TrackPopupMenuEx_Replacement(HMENU hMenu, UINT uFlags, int x, int y, HWND hwnd, LPTPMPARAMS lptpm);
HDC WINAPI GetDCEx_Replacement(HWND hWnd, HRGN hrgnClip, DWORD flags);
BOOL WINAPI GetUpdateRect_Replacement(HWND hWnd, LPRECT lpRect, BOOL bErase);
int WINAPI GetUpdateRgn_Replacement(HWND hWnd, HRGN hRgn, BOOL bErase);
BOOL WINAPI InvalidateRgn_Replacement(HWND hWnd, HRGN hRgn, BOOL bErase);
BOOL WINAPI RedrawWindow_Replacement(HWND hWnd, CONST RECT* lprcUpdate, HRGN hrgnUpdate, UINT flags);
int WINAPI GetSystemMetrics_Replacement(int nIndex);
BOOL WINAPI GetMonitorInfoA_Replacement(HMONITOR hMonitor, LPMONITORINFO lpmi);
BOOL WINAPI GetMonitorInfoW_Replacement(HMONITOR hMonitor, LPMONITORINFO lpmi);
BOOL WINAPI IsZoomed_Replacement(HWND hWnd);
FARPROC WINAPI GetProcAddress_Replacement(HMODULE hModule, LPCSTR lpProcName);
HMODULE WINAPI LoadLibraryA_Replacement(LPCSTR fileName);
HMODULE WINAPI LoadLibraryW_Replacement(LPCWSTR fileName);
IDirect3D9*  WINAPI Direct3DCreate9_Replacement(UINT SDKVersion);
HRESULT WINAPI Direct3DCreate9Ex_Replacement(UINT SDKVersion, IDirect3D9Ex** lpIDirect3D9Ex);
HRESULT WINAPI DirectDrawCreate_Replacement(GUID* lpGUID, LPDIRECTDRAW* lplpDD, IUnknown* pUnkOuter);
HRESULT WINAPI DirectDrawCreateEx_Replacement(GUID* lpGuid, LPVOID* lplpDD, REFIID iid, IUnknown* pUnkOuter);

void BuildImportMap();
void ReplaceImports(HMODULE module = NULL);
